import pandas as pd
import os

################################################################################
#READ CSV FILE FROM DIR
df = pd.read_csv("./Sales_Data1/Sales_April_2019.csv")
df.head()

##########################"list comprehension"#########################################################
S = [x**2 for x in range(10)]
V = [2**i for i in range(13)]
M = [x for x in S if x % 2 == 0]

print(S) 
print(V)
print(M)

[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]
[0, 4, 16, 36, 64]
#####################################################################################
#os.listdir() method in python is used to get the list of all files and directories in the specified directory. 
#If we don’t specify any directory, then list of files and directories in the current working directory will be returned.
#Syntax: os.listdir(path)
#Return Type: This method returns the list of all files and directories in the specified path. The return type of this method is list.
############################################################################################################
import os
files = [file for file in os.listdir('./Sales_Data1') if not file.startswith('.')]
print(files)         
all_months_data = pd.DataFrame()
print(type(all_months_data))     #<class 'pandas.core.frame.DataFrame'>


#########################################################################################################
for file in files:    #files is a list 
    print(file)
    print("./Sales_Data1/" + file)
    df = pd.read_csv("./Sales_Data1/" + file)
    print(type(df))
    all_months_data = pd.concat([all_months_data,df])
########################################################################################################
Sales_October_2019.csv
./Sales_Data1/Sales_October_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_January_2019.csv
./Sales_Data1/Sales_January_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_February_2019.csv
./Sales_Data1/Sales_February_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_June_2019.csv
./Sales_Data1/Sales_June_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_March_2019.csv
./Sales_Data1/Sales_March_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_August_2019.csv
./Sales_Data1/Sales_August_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_September_2019.csv
./Sales_Data1/Sales_September_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_April_2019.csv
./Sales_Data1/Sales_April_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_July_2019.csv
./Sales_Data1/Sales_July_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_December_2019.csv
./Sales_Data1/Sales_December_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_May_2019.csv
./Sales_Data1/Sales_May_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_November_2019.csv
./Sales_Data1/Sales_November_2019.csv
<class 'pandas.core.frame.DataFrame'>
#######################################################################################################
all_months_data.to_csv("all_data.csv", index=False)  #convert DataFrame to csv
all_data = pd.read_csv("all_data.csv")          #read  CSV file
all_data                                 #849631 rows × 6 columns

#################################### CLEANING NAN ###############################################################
isna(). any() . This will check all of our columns and return True if there are any missing values or NaN s,
or False if there are no missing values.
###################################yes NAN PRESENT###############################################################################
nan_df = all_data[all_data.isna().any(axis=1)]  #axis=0 row, axis=1 column
nan_df.head()
######################################################################################################################
how{‘any’, ‘all’}, default ‘any’
Determine if row or column is removed from DataFrame, when we have at least one NA or all NA.

‘any’ : If any NA values are present, drop that row or column.

‘all’ : If all values are NA, drop that row or column.
##################################DROP NAN ROW OR COL####################################################
all_data = all_data.dropna(how='all')
all_data.head()
####################################################################################################################
temp_df = all_data[all_data['Order Date'].str[0:2] == 'Or']
temp_df.head()
###################################################################################################################
all_data = all_data[all_data['Order Date'].str[0:2] != 'Or']
all_data.head()
####################################CREATE A COLUMN Month as int32#########################################################
all_data['Month'] = all_data['Order Date'].str[0:2]
all_data.head()
all_data['Month'] = all_data['Month'].astype('int32')
all_data.head()
###########COLUMN Quantity Ordered, Price Each, Sales to make numeric and multiply(so need same datatype)##########

all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])
all_data['Price Each'] = pd.to_numeric(all_data['Price Each'])
all_data['Sales'] = all_data['Quantity Ordered'] * all_data['Price Each']
all_data.head()
##############################################################################################################
Use DataFrame.groupby().sum() to group rows based on one or multiple columns and calculate sum agg function. 

groupby() function returns a DataFrameGroupBy object which contains an aggregate function sum() to calculate 
a sum of a given column for each group.

	Order ID	Product	Quantity Ordered	Price Each	Order Date	Purchase Address	Sales
Month							
1	1412341412351412361412371412381412391412401412...	iPhoneLightning Charging CableWired Headphones...	10903	1811768.38	01/22/19 21:2501/28/19 14:1501/17/19 13:3301/0...	944 Walnut St, Boston, MA 02215185 Maple St, P...	1822256.73
2	1505021505031505041505051505061505071505081505...	iPhoneAA Batteries (4-pack)27in 4K Gaming Moni...	13449	2188884.72	02/18/19 01:3502/13/19 07:2402/18/19 09:4602/0...	866 Spruce St, Portland, ME 0410118 13th St, S...	2202022.42
3	1620091620091620091620101620111620121620131620...	iPhoneLightning Charging CableWired Headphones...	17005	2791207.83	03/28/19 20:5903/28/19 20:5903/28/19 20:5903/1...	942 Church St, Austin, TX 73301942 Church St, ...	2807100.38
4	1765581765591765601765601765611765621765631765...	USB-C Charging CableBose SoundSport Headphones...	20558	3367671.02	04/19/19 08:4604/07/19 22:3004/12/19 14:3804/1...	917 1st St, Dallas, TX 75001682 Chestnut St, B...	3390670.24
##############################################################################################################
results = all_data.groupby('Month').sum() #groupby month data get
results
#############################################################################################################
import matplotlib.pyplot as plt
months = range(1,13) # 1 to 12
plt.bar(months,results['Sales'])
plt.xticks(months)
plt.ylabel('Sales in USD ($)')
plt.xlabel('Month Number')
plt.show()

###############################################################################################################
txt = "hello, my name is Peter, I am 26 years old"

x = txt.split(", ")

print(x)

['hello', 'my name is Peter', 'I am 26 years old']
-------------------------------------------------------------------
txt = "apple#banana#cherry#orange"

x = txt.split("#")

print(x)

['apple', 'banana', 'cherry', 'orange']
----------------------------------------------------------------------
txt = "welcome to the jungle"

x = txt.split()

print(x)

['welcome', 'to', 'the', 'jungle']
----------------------------------------------------------------------
txt = "apple#banana#cherry#orange"

# setting the maxsplit parameter to 1, will return a list with 2 elements!
x = txt.split("#", 1)

print(x)

['apple', 'banana#cherry#orange']

#############################################################################################################
lambda arguments : expression   
A lambda function can take any number of arguments, but can only have one expression.
---------------------------------------------
#Add 10 to argument a, and return the result:
x = lambda a : a + 10
print(x(5))

15
-------------------------------
x = lambda a, b : a * b
print(x(5, 6))

30
------------------------------------
def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(2)

print(mydoubler(11))

22
------------------------------
DataFrame.apply(func, axis=0, raw=False, result_type=None, args=(), **kwargs)
Apply a function along an axis of the DataFrame.

funcfunction
Function to apply to each column or row.

axis{0 or ‘index’, 1 or ‘columns’}, default 0
Axis along which the function is applied:

0 or ‘index’: apply function to each column.

1 or ‘columns’: apply function to each row.



##############################################################################################################
def get_city(address):
    return address.split(',')[1]
def get_state(address):
    return address.split(',')[2].split(' ')[1]
all_data['City'] = all_data['Purchase Address'].apply(lambda x : f"{get_city(x)}  ({get_state(x)})")
all_data.head()
#################################################################################################################
[x for x in text if x.isdigit()]

is a "list comprehension". It means something like "for each x in text, if x.isdigit() is True, add it to the list
##################################################################################################################
results = all_data.groupby('City').sum()
results.head()
################################################################################################################
	Order ID	Product	Quantity Ordered	Price Each	Order Date	Purchase Address	Month	Sales
City								
Atlanta (GA)	1765641765711765821765891766231766271766341766...	USB-C Charging CableLightning Charging CableBo...	16602	2779908.20	04/12/19 10:5804/19/19 14:2904/27/19 12:2004/0...	790 Ridge St, Atlanta, GA 30301253 Johnson St,...	104794	2795498.58
Austin (TX)	1765911766091766741766771766861767011767051767...	Apple Airpods HeadphonesApple Airpods Headphon...	11153	1809873.61	04/21/19 07:2104/11/19 16:5904/20/19 20:5304/0...	600 Maple St, Austin, TX 73301267 11th St, 
########################################################################################################################
#cities = all_data['City'].unique()
cities = [city for city, df in all_data.groupby('City')]
print(cities)
########################################################################################################################
[' Atlanta  (GA)', ' Austin  (TX)', ' Boston  (MA)', ' Dallas  (TX)', ' Los Angeles  (CA)', ' New York City  (NY)', ' Portland  (ME)', ' Portland  (OR)', ' San Francisco  (CA)', ' Seattle  (WA)']
#########################################################################################################################

plt.bar(cities, results['Sales'])
plt.xticks(cities,rotation='vertical',size=10)
plt.ylabel('Sales in USD ($)')
plt.xlabel('Cities Name')
plt.show()
############################################################################################################################
all_data['Order Date'] = pd.to_datetime(all_data['Order Date'], format='mixed')
all_data.head()
######################################existing#########################################################################
04/19/19 08:46
#########################################convert#############################################################################
Order ID	Product	Quantity Ordered	Price Each	Order Date	Purchase Address	Month	Sales	City
0	176558	USB-C Charging Cable	2	11.95	2019-04-19 08:46:00	917 1st St, Dallas, TX 75001	4	23.90	Dallas (TX)
2	176559	Bose SoundSport Headphones	1	99.99	2019-04-07 22:30:00	682 Chestnut St, Boston, MA 02215	4	99.99	Boston (MA)
3	176560	Google Phone	1	600.00	2019-04-12 14:38:00	669 Spruce St, Los Angeles, CA 90001	4	600.00	Los Angeles (CA)
4	176560	Wired Headphones	1	11.99	2019-04-12 14:38:00	669 Spruce St, Los Angeles, CA 90001	4	11.99	Los Angeles (CA)
5	176561	Wired Headphones	1	11.99	2019-04-30 09:27:00	333 8th St, Los Angeles, CA 90001	4	11.99	Los Angeles (CA)
############################################################################################################################

#all_data['Order Date'] = pd.to_datetime(all_data['Order Date'], format='%d%b%Y:%H:%M:%S.%f')
#all_data['Order Date'] = pd.to_datetime(all_data['Order Date'])
#all_data.head()
###############################################################################################################################
all_data['Hour'] = all_data['Order Date'].dt.hour
all_data['Minute'] = all_data['Order Date'].dt.minute
all_data.head()
##############################################################################################################################
Order ID	Product	Quantity Ordered	Price Each	Order Date	Purchase Address	Month	Sales	City	Hour	Minute
0	259358	34in Ultrawide Monitor	1	379.99	2019-10-28 10:56:00	609 Cherry St, Dallas, TX 75001	10	379.99	Dallas (TX)	10	56
1	259359	27in 4K Gaming Monitor	1	389.99	2019-10-28 17:26:00	225 5th St, Los Angeles, CA 90001	10	389.99	Los Angeles (CA)	17	26
2	259360	AAA Batteries (4-pack)	2	2.99	2019-10-24 17:20:00	967 12th St, New York City, NY 10001	10	5.98	New York City (NY)	17	20
3	259361	27in FHD Monitor	1	149.99	2019-10-14 22:26:00	628 Jefferson St, New York City, NY 10001	10	149.99	New York City (NY)	22	26
4	259362	Wired Headphones	1	11.99	2019-10-07 16:10:00	534 14th St, Los Angeles, CA 90001	10	11.99	Los Angeles (CA)	16	10
###############################################################################################################################
hours = [hour for hour, df in all_data.groupby('Hour')]
print(hours)
##############################################################################################################################
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
##############################################################################################################################
print(all_data.groupby(['Hour']).count())
############################################################################################################################
     Order ID  Product  Quantity Ordered  Price Each  Order Date  \
Hour                                                                
0         3910     3910              3910        3910        3910   
1         2350     2350              2350        2350        2350   
2         1243     1243              1243        1243        1243   
3          831      831               831         831         831   
4          854      854               854         854         854   
5         1321     1321              1321        1321        1321   
6         2482     2482              2482        2482        2482   
7         4011     4011              4011        4011        4011   
8         6256     6256              6256        6256        6256   
9         8748     8748              8748        8748        8748   
10       10944    10944             10944       10944       10944   
11       12411    12411             12411       12411       12411   
12       12587    12587             12587       12587       12587   
13       12129    12129             12129       12129       12129   
14       10984    10984             10984       10984       10984   
15       10175    10175             10175       10175       10175   
16       10384    10384             10384       10384       10384   
17       10899    10899             10899       10899       10899   
18       12280    12280             12280       12280       12280   
19       12905    12905             12905       12905       12905   
20       12228    12228             12228       12228       12228   
21       10921    10921             10921       10921       10921   
22        8822     8822              8822        8822        8822   
23        6275     6275              6275        6275        6275   
###########################################################################################################
plt.plot(hours,all_data.groupby(['Hour']).count())
all_data.groupby(['Hour']).count()
plt.xticks(hours)
plt.grid()
plt.xlabel('Hours')
plt.ylabel('Numbers of Order')
plt.show()
#############################################################################################################

df = all_data[all_data['Order ID'].duplicated(keep=False)]
df.head(20)
###############################################################################################################
Order ID	Product	Quantity Ordered	Price Each	Order Date	Purchase Address	Month	Sales	City	Hour	Minute
62	259420	Google Phone	1	600.00	2019-10-18 08:54:00	791 Forest St, Los Angeles, CA 90001	10	600.00	Los Angeles (CA)	8	54
63	259420	USB-C Charging Cable	2	11.95	2019-10-18 08:54:00	791 Forest St, Los Angeles, CA 90001	10	23.90	Los Angeles (CA)	8	54
65	259422	Google Phone	1	600.00	2019-10-05 04:53:00	849 Ridge St, San Francisco, CA 94016	10	600.00	San Francisco (CA)	4	53
66	259422	USB-C Charging Cable	1	11.95	2019-10-05 04:53:00	849 Ridge St, San Francisco, CA 94016	10	11.95	San Francisco (CA)	4	53
82	259438	iPhone	1	700.00	2019-10-29 09:47:00	176 5th St, Los Angeles, CA 90001	10	700.00	Los Angeles (CA)	9	47
83	259438	Lightning Charging Cable	1	14.95	2019-10-29 09:47:00	176 5th St, Los Angeles, CA 90001	10	14.95	Los Angeles (CA)	9	47
####################################################################################################################################
df['Groupid'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))
df.head()
######################################################################################################################################
Order ID	Product	Quantity Ordered	Price Each	Order Date	Purchase Address	Month	Sales	City	Hour	Minute	Groupid
62	259420	Google Phone	1	600.00	2019-10-18 08:54:00	791 Forest St, Los Angeles, CA 90001	10	600.00	Los Angeles (CA)	8	54	Google Phone,USB-C Charging Cable
63	259420	USB-C Charging Cable	2	11.95	2019-10-18 08:54:00	791 Forest St, Los Angeles, CA 90001	10	23.90	Los Angeles (CA)	8	54	Google Phone,USB-C Charging Cable
###########################################################################################################################################
df = df[['Order ID','Groupid']].drop_duplicates()
df.head()
###########################################################################################################################################
Order ID	Groupid
62	259420	Google Phone,USB-C Charging Cable
65	259422	Google Phone,USB-C Charging Cable
82	259438	iPhone,Lightning Charging Cable
103	259458	34in Ultrawide Monitor,ThinkPad Laptop
123	259477	LG Dryer,AAA Batteries (4-pack)
##########################################DROP CLOUMN ORDER DATE###############################################################################################
all_data_new  = all_data.drop(columns = ['Order Date'])
all_data_new.head()
##########################################################################################################################################################
product_group = all_data_new.groupby('Product').sum()
product_group
##########################################################################################################################################
	Order ID	Quantity Ordered	Price Each	Purchase Address	Month	Sales	City	Hour	Minute
Product									
20in Monitor	2593702594462594792595512596612597322597472598...	4129	451068.99	528 Forest St, San Francisco, CA 94016796 Wash...	29336	454148.71	San Francisco (CA) Los Angeles (CA) Atlanta...	58764	122252
27in 4K Gaming Monitor	2593592593792594002594262594852595482595702595...	6244	2429637.70	225 5th St, Los Angeles, CA 90001148 Lincoln S...	44440	2435097.56	Los Angeles (CA) San Francisco (CA) Los Ang...	90916	184331
27in FHD Monitor	2593612593682593732593762594092594312594472594...	7550	1125974.93	628 Jefferson St, New York City, NY 10001960 R...	52558	1132424.50	New York City (NY) Boston (MA) San Francisc...	107540	219948
##################################################################################################################################
quantity_ordered = product_group['Quantity Ordered']
quantity_ordered.head()
##################################################################################################################################
Product
20in Monitor               4129
27in 4K Gaming Monitor     6244
27in FHD Monitor           7550
34in Ultrawide Monitor     6199
AA Batteries (4-pack)     27635
Name: Quantity Ordered, dtype: int64
############################################################################################################################
products = [product for product, df in product_group]
plt.bar(products, quantity_ordered)
plt.xticks(products,rotation='vertical',size=8)
plt.ylabel('Quantity Ordered')
plt.xlabel('Products')
plt.show()



