import pandas as pd
import os

################################################################################
#READ CSV FILE FROM DIR
df = pd.read_csv("./Sales_Data1/Sales_April_2019.csv")
df.head()

##########################"list comprehension"#########################################################
S = [x**2 for x in range(10)]
V = [2**i for i in range(13)]
M = [x for x in S if x % 2 == 0]

print(S) 
print(V)
print(M)

[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]
[0, 4, 16, 36, 64]
#####################################################################################
#os.listdir() method in python is used to get the list of all files and directories in the specified directory. 
#If we don’t specify any directory, then list of files and directories in the current working directory will be returned.
#Syntax: os.listdir(path)
#Return Type: This method returns the list of all files and directories in the specified path. The return type of this method is list.
############################################################################################################
import os
files = [file for file in os.listdir('./Sales_Data1') if not file.startswith('.')]
print(files)         
all_months_data = pd.DataFrame()
print(type(all_months_data))     #<class 'pandas.core.frame.DataFrame'>


#########################################################################################################
for file in files:    #files is a list 
    print(file)
    print("./Sales_Data1/" + file)
    df = pd.read_csv("./Sales_Data1/" + file)
    print(type(df))
    all_months_data = pd.concat([all_months_data,df])
########################################################################################################
Sales_October_2019.csv
./Sales_Data1/Sales_October_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_January_2019.csv
./Sales_Data1/Sales_January_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_February_2019.csv
./Sales_Data1/Sales_February_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_June_2019.csv
./Sales_Data1/Sales_June_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_March_2019.csv
./Sales_Data1/Sales_March_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_August_2019.csv
./Sales_Data1/Sales_August_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_September_2019.csv
./Sales_Data1/Sales_September_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_April_2019.csv
./Sales_Data1/Sales_April_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_July_2019.csv
./Sales_Data1/Sales_July_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_December_2019.csv
./Sales_Data1/Sales_December_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_May_2019.csv
./Sales_Data1/Sales_May_2019.csv
<class 'pandas.core.frame.DataFrame'>
Sales_November_2019.csv
./Sales_Data1/Sales_November_2019.csv
<class 'pandas.core.frame.DataFrame'>
#######################################################################################################
all_months_data.to_csv("all_data.csv", index=False)  #convert DataFrame to csv
all_data = pd.read_csv("all_data.csv")          #read  CSV file
all_data                                 #849631 rows × 6 columns

#################################### CLEANING NAN ###############################################################
isna(). any() . This will check all of our columns and return True if there are any missing values or NaN s,
or False if there are no missing values.
###################################yes NAN PRESENT###############################################################################
nan_df = all_data[all_data.isna().any(axis=1)]  #axis=0 row, axis=1 column
nan_df.head()
######################################################################################################################
how{‘any’, ‘all’}, default ‘any’
Determine if row or column is removed from DataFrame, when we have at least one NA or all NA.

‘any’ : If any NA values are present, drop that row or column.

‘all’ : If all values are NA, drop that row or column.
##################################DROP NAN ROW OR COL####################################################
all_data = all_data.dropna(how='all')
all_data.head()
####################################################################################################################
temp_df = all_data[all_data['Order Date'].str[0:2] == 'Or']
temp_df.head()
###################################################################################################################
all_data = all_data[all_data['Order Date'].str[0:2] != 'Or']
all_data.head()
####################################CREATE A COLUMN Month as int32#########################################################
all_data['Month'] = all_data['Order Date'].str[0:2]
all_data.head()
all_data['Month'] = all_data['Month'].astype('int32')
all_data.head()
###########COLUMN Quantity Ordered, Price Each, Sales to make numeric and multiply(so need same datatype)##########

all_data['Quantity Ordered'] = pd.to_numeric(all_data['Quantity Ordered'])
all_data['Price Each'] = pd.to_numeric(all_data['Price Each'])
all_data['Sales'] = all_data['Quantity Ordered'] * all_data['Price Each']
all_data.head()
##############################################################################################################
results = all_data.groupby('Month').sum() #groupby month data get
results

import matplotlib.pyplot as plt
months = range(1,13) # 1 to 12
plt.bar(months,results['Sales'])
plt.xticks(months)
plt.ylabel('Sales in USD ($)')
plt.xlabel('Month Number')
plt.show()


def get_city(address):
    return address.split(',')[1]
def get_state(address):
    return address.split(',')[2].split(' ')[1]
all_data['City'] = all_data['Purchase Address'].apply(lambda x : f"{get_city(x)}  ({get_state(x)})")
all_data.head()



results = all_data.groupby('City').sum()
results
#cities = all_data['City'].unique()
cities = [city for city, df in all_data.groupby('City')]
plt.bar(cities, results['Sales'])
plt.xticks(cities,rotation='vertical',size=10)
plt.ylabel('Sales in USD ($)')
plt.xlabel('Cities Name')
plt.show()


all_data['Order Date'] = pd.to_datetime(all_data['Order Date'])
all_data.head()

all_data['Hour'] = all_data['Order Date'].dt.hour
all_data['Minute'] = all_data['Order Date'].dt.minute
all_data.head()


hours = [hour for hour, df in all_data.groupby('Hour')]
plt.plot(hours,all_data.groupby(['Hour']).count())
all_data.groupby(['Hour']).count()
plt.xticks(hours)
plt.grid()
plt.xlabel('Hours')
plt.ylabel('Numbers of Order')
plt.show()


df = all_data[all_data['Order ID'].duplicated(keep=False)]
#df.head(20)
df['Groupid'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))
#df.head()
df = df[['Order ID','Groupid']].drop_duplicates()
df.head()






